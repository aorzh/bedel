<?php

/**
 * Implement hook_init().
 */
define('BELGIUM_PERMISSION', 'administer belgium');

/**
 * Implement hook_help().
 * @param $path
 * @param $arg
 * @return string
 */
function belgium_help($path, $arg) {
    switch ($path) {
        case "admin/help#belgium":
            return '<p>' . t("Create custom map on http://www.image-maps.com") . '</p>';
            break;
    }
}


/**
 * Implement hook_permission().
 * @return array
 */
function belgium_permission() {
    return array(
      BELGIUM_PERMISSION => array(
        'title' => t('Administer Belgium module'),
        'description' => t('Perform administration tasks for Belgium module.'),
      ),
    );
}

/**
 * Implement hook_menu().
 * @return string
 */
function belgium_menu() {
    $items = array();
    $items['admin/config/user-interface/map'] = array(
      'title' => 'Map',
      'description' => 'Custom map',
      'access arguments' => array('administer belgium'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('belgium_map_form'),
    //  'type' => MENU_DEFAULT_LOCAL_TASK,
    //  'weight' => 0,
    );
  /*  $items['admin/config/user-interface/rec'] = array(
      'title' => 'Images',
      'description' => '',
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
      'access arguments' => array('administer belgium'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('belgium_image_form'),
    );
*/
    $items['ajax/get_info'] = array(
      'page callback' => 'belgium_tradition_info',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    );

    $items['ajax/tooltip'] = array(
      'page callback' => 'belgium_tooltip',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    );

    $items['ajax/tradition'] = array(
      'title' => t(''),
      'page callback' => 'belgium_tradition_generate',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    );

    $items['ajax/get_tradition'] = array(
      'title' => t(''),
      'page callback' => 'belgium_tradition_get',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    );

    return $items;
}

/**
 * @param $form
 * @param $form_state
 */
function belgium_map_form($form, &$form_state) {
    $descr = t('Go to <a href="http://www.image-maps.com"> http://www.image-maps.com</a>, upload your map and follow instructions. <br /> Get your http code and paste to this area.');

    $form['map'] = array(
      '#type' => 'textarea',
      '#description' => $descr,
      '#default_value' => variable_get('map_source') ? variable_get('map_source') : '',
    );
    $form['city_population'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
    );
    $city_names = belgium_terms('City');
    foreach ($city_names as $key => $city) {
        $form['city_population'][$key] = array(
          '#type' => 'textfield',
          '#title' => $city,
          '#size' => 15,
          '#default_value' => variable_get('population_' . $key) ? variable_get('population_' . $key) : '',
        );
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Save',
    );

    return $form;
}

/**
 * Implement hook_validate().
 * @param $form
 * @param $form_state
 * @return mixed
 */
function belgium_map_form_validate($form, $form_state) {
//
    return $form;
}

function belgium_map_form_submit($form, $form_state) {
    $map = $form_state['values']['map'];
    variable_set('map_source', $map);

    $population = $form_state['values']['city_population'];

    foreach ($population as $key => $value) {
        variable_set("population_" . $key, (int) trim($value));
    }
    drupal_set_message(t('Saved.'));
    return $form;
}

/**
 * Implement hook_block_info().
 * @return array
 */
function belgium_block_info() {
    $blocks = array();

    $blocks['map'] = array(
      'info' => t('Belgium map'),
    );
    // @todo add only on listed pages
    $blocks['ideas'] = array(
      'info' => t('Ideas block'),
    );

    return $blocks;
}

/**
 * Implement hook_block_info().
 * @param string $delta
 * @return array
 */
function belgium_block_view($delta = '') {
    $block = array();

    switch ($delta) {
        case 'map':
            $block['subject'] = '';
            $block['content'] = _belgium_render_map();
            break;
        case 'ideas':
            $block['subject'] = '';
            $block['content'] = _belgium_ideas();
    }

    return $block;
}

function belgium_terms($voc_name) {
    $vid = '';
    switch ($voc_name) {
        case 'City':
            $vid = 3;
            break;
        case 'Traditions':
            $vid = 2;
            break;
        default:
            break;
    }
    $tree = taxonomy_get_tree($vid);
    $names = array();
    foreach ($tree as $name) {
        $names[$name->tid] = $name->name;

    }
    return $names;
}

function _belgium_ideas() {
    $path = drupal_get_path('module', 'belgium');
    $path_to_css = $path . '/css/zelf.css';
    drupal_add_css($path_to_css);


    $nid = arg(1);
    $node = node_load($nid);
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $tradition = $node_wrapper->field_tradition->value();
    //Tradition term id for current page
    $tid = $tradition->tid;

    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title'));
    //$query->condition('n.title', $tradition->name, '=');
    $query->leftJoin('field_data_field_subtitle', 'fs', 'n.nid = fs.entity_id');
    $query->fields('fs', array('field_subtitle_value'));
    $query->leftJoin('field_data_field_categorie', 'fc', 'fc.entity_id = n.nid');
    $query->fields('fc', array('field_categorie_value'));
    //$query->condition('vj.bundle', 'requirements', '=');
    $query->condition('n.type', 'requirements', '=');
    $node_list = $query->execute();
    $ideas = $node_list->fetchAll();

    $query = db_select('field_data_field_titel', 'ft');
    $query->distinct();
    $query->fields('ft', array('entity_id', 'field_titel_value'));
    $query->innerJoin('field_data_field_ref_traditions', 'vj', 'ft.entity_id = vj.entity_id');
    $query->leftJoin('field_data_field_subtitle', 'fs', 'ft.entity_id = fs.entity_id');
    $query->fields('fs', array('field_subtitle_value'));
    $query->leftJoin('field_data_field_categorie', 'fc', 'fc.entity_id = ft.entity_id');
    $query->fields('fc', array('field_categorie_value'));
    $query->condition('vj.bundle', 'new_idea', '=');
    $node_list = $query->execute();
    $ideas_form = $node_list->fetchAll();

    $ideas_merge = array_merge($ideas, $ideas_form);

    $ideas_clean = _belgium_cleanup($ideas_merge);

    $output = '<ul class="idea idea-list">';

    foreach ($ideas_clean as $key => $value) {
        $output .= '<li><span class="icon-z"><img src="' . $value['icon'] . '"></span><div class="title-wrap"><span class="title"><a href="/' . $value['arg'] . '/' . $value['nid'] . '">' . $value['title'] . '</a></span>';
        if (isset($value['subtitle'])) {
            $output .= '<br /><span class="subtitle">' . $value['subtitle'] . '</span><div></li>';
        } else {
            $output .= '</div></li>';
        }

    }
    $output .= '</ul>';

    return $output;

}

function _belgium_cleanup($res) {
    $return = array();
    $i = 0;
    $path = drupal_get_path('module', 'belgium');
    foreach ($res as $key => $value) {
        //add icon
        switch($value->field_categorie_value){
            case 1:
                $return[$i]['icon'] = '/' . $path . '/img/knutselplezier.png';
                break;
            case 2:
                $return[$i]['icon'] = '/' . $path . '/img/bakplezier.png';
                break;
        }
        if (isset($value->nid)) {
            $return[$i]['nid'] = $value->nid;
            $return[$i]['arg'] = 'node';
        }
        if (isset($value->title)) {
            $return[$i]['title'] = $value->title;
        }
        if (isset($value->field_subtitle_value)) {
            $return[$i]['subtitle'] = $value->field_subtitle_value;
        }

        if (isset($value->entity_id)) {
            $return[$i]['nid'] = $value->entity_id;
            $return[$i]['arg'] = 'entityform';

        }
        if (isset($value->field_titel_value)) {
            $return[$i]['title'] = $value->field_titel_value;
        }
        $i++;
    }

    return $return;
}

function belgium_tooltip() {
    $tradition_id = $_POST['tradition_id'];
    $town = ucfirst($_POST['town']);

    $singers_sum = 0;
    $tid = db_select('taxonomy_term_data', 'td')
      ->fields('td', array('tid'))
      ->condition('td.name', $town)
      ->execute()
      ->fetchField();
    $population = variable_get("population_" . $tid);

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'entityform')
      ->entityCondition('bundle', 'competition')
      ->fieldCondition('field_tradition', 'tid', $tradition_id, '=', 0)
      ->fieldCondition('field_city', 'tid', $tid, '=', 0);
    $results = $query->execute();
    if (isset($results['entityform'])) {
        foreach ($results['entityform'] as $result) {
            $submission_wrapper = entity_metadata_wrapper('entityform', $result->entityform_id);
            $singers = $submission_wrapper->field_aantal_zangers->value();
            $singers_sum = $singers + $singers_sum;

        }
    }


    $points = ($singers_sum / $population) * 100;

    $output = '<b>' . $town . '</b> <br /> <p>- ' . $singers_sum . ' deelnames<br />- ' . round($points, 2) . ' punten</p>';


    drupal_json_output($output);
}

/**
 *
 */
function belgium_tradition_info() {
    $tradition_id = $_POST['trad_id'];

    $city_names = belgium_terms('City');
    $sum = array();
    foreach ($city_names as $key => $city) {
        $singers_sum = 0;
        //$population = variable_get('population_' . $key);

        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'entityform')
          ->entityCondition('bundle', 'competition')
          ->fieldCondition('field_tradition', 'tid', $tradition_id, '=', 0)
          ->fieldCondition('field_city', 'tid', $key, '=', 0);
        $results = $query->execute();
        if (isset($results['entityform'])) {
            foreach ($results['entityform'] as $result) {
                $submission_wrapper = entity_metadata_wrapper('entityform', $result->entityform_id);
                $singers = $submission_wrapper->field_aantal_zangers->value();
                $field_city = $submission_wrapper->field_city->value();
                $singers_sum = $singers + $singers_sum;
            }
        }
        if (isset($singers_sum) && $singers_sum != NULL) {
            $push = array($field_city->name => $singers_sum);
            array_push($sum, $push);
        } else {
            $push = array($city => 0);
            array_push($sum, $push);
        }
    }
    $return = array();
    foreach ($sum as $child) {
        $return = array_merge($return, $child);
    }
    arsort($return);
    $data = $return;
    drupal_json_output($data);

}

/**
 * @return mixed
 */
function _belgium_render_map() {
    $path = drupal_get_path('module', 'belgium');
    $metadata = $path . '/js/jquery.metadata.js';
    $path_to_js = $path . '/js/script.js';
    $path_to_css = $path . '/css/style.css';
    $image_resize = $path . '/js/imageMapResizer.min.js';
    $light = $path . '/js/jquery.maphilight.min.js';


    $tooltip_js = $path . '/js/jquery.qtip.min.js';
    $tooltip_js_map = $path . '/js/jquery.qtip.min.js.map';
    //$tooltip_js_img = $path . '/js/imagesloaded.pkg.min.js';
    //$tooltip_js_img_map = $path . '/js/imagesloaded.pkg.min.js.map';

    $tooltip_css = $path . '/css/jquery.qtip.min.css';

    $city_names = belgium_terms('City');
    $traditions = belgium_terms('Traditions');
    $population = array();

    foreach ($city_names as $key => $city) {
        $population[$city] = variable_get("population_" . $key);
    }

    drupal_add_js(array(
      'belgium' => array(
        'city' => $city_names,
        'traditions' => $traditions,
        'population' => $population,

      )
    ), 'setting');

    drupal_add_css($tooltip_css);
    drupal_add_js($tooltip_js);
    drupal_add_js($tooltip_js_map);

    drupal_add_js($metadata);
    //drupal_add_js($tooltip_js_img_map);

    drupal_add_js($path_to_js);
    drupal_add_js($image_resize);
    drupal_add_js($light);
    drupal_add_css($path_to_css);

    $output = variable_get('map_source');
    return $output;
}

/**
 *
 */
function belgium_tradition_generate() {
    $nid = $_POST['nid'];
    $node = node_load($nid);
    $name = strtolower($node->title);

    drupal_json_output($name);
}

function belgium_tradition_get() {
    $name = $_POST['trad_name'];
    $termin = taxonomy_get_term_by_name($name);
    $tid = '';
    foreach ($termin as $t) {
        $tid = $t->tid;
    }
    drupal_json_output($tid);
}

/**
 * Implement hook_form().
 * @param $form
 * @param $form_state
 * @return mixed
 */
/*
function belgium_image_form($form, &$form_state) {
    $form['bakplezier'] = array(
      '#type' => 'file',
      '#title' => t('Bak- en kookplezier'),
    );
    $form['knutselplezier'] = array(
      '#type' => 'file',
      '#title' => t('Handgemaakt'),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Save',
    );

    return $form;
}/

/**
 * @param $form
 * @param $form_state
 */
/*
function belgium_image_form_validate($form, &$form_state) {
   // Nothing yet
}

function belgium_image_form_submit($form, &$form_state) {
    //
}*/